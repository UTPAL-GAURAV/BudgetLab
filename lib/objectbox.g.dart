// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'BudgetModule/Budgets/Budget/budget_entity.dart';
import 'BudgetModule/Budgets/Category/category_entity.dart';
import 'BudgetModule/Budgets/Cycles/cycleSavings_entity.dart';
import 'BudgetModule/History/history_entity.dart';
import 'BudgetModule/LoanLend/loanLend_entity.dart';
import 'BudgetModule/Savings/saings_entity.dart';
import 'SettingsModule/metadata_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3912639388013938141),
      name: 'Budget',
      lastPropertyId: const IdUid(3, 2295571132967557559),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5089663918438219010),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7117724927169584856),
            name: 'repeats',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2295571132967557559),
            name: 'amount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1588695050128735560),
      name: 'Category',
      lastPropertyId: const IdUid(12, 6137395167917117920),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4169513893214613262),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2832366461472518905),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3292258396681020156),
            name: 'icon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8479352502840281917),
            name: 'transactionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5387226862446077823),
            name: 'isCap',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 973907858020450545),
            name: 'cycle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 389783756576175178),
            name: 'cycleBudget',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7963792157368934997),
            name: 'addToNextCycle',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5778259537840492242),
            name: 'currentCycleAmountLeft',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5520781285941322150),
            name: 'totalCycleAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6137395167917117920),
            name: 'totalAmountSpent',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 9052435534381775407),
      name: 'LoanLend',
      lastPropertyId: const IdUid(10, 83039039708730487),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2062997448433781121),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3324376512030445888),
            name: 'isLoan',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4028527212899484197),
            name: 'dateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2845511107751879036),
            name: 'dateOfReturn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7572490216904874117),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 472858004322395733),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8637945009649281167),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8499334383457211072),
            name: 'returnStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2156790177571280887),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 83039039708730487),
            name: 'genderEmoji',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 3071978227778497905),
      name: 'Metadata',
      lastPropertyId: const IdUid(10, 5205876471603607160),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3918733605684651353),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6529066406702624820),
            name: 'currentBalance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7525627846413658126),
            name: 'yourWorth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2882924185126059228),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1538656536889066998),
            name: 'currency',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1530149613637301564),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7731241619166360903),
            name: 'countryCode',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7650055383835823745),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5402709417376191570),
            name: 'hideOn',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5205876471603607160),
            name: 'readMessage',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5953722859783493972),
      name: 'Savings',
      lastPropertyId: const IdUid(5, 5271227194289515064),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1975492489271444302),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2945359868757435183),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2768477032845607697),
            name: 'targetAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3986030090361302007),
            name: 'savedAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5271227194289515064),
            name: 'icon',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 3987736464679128829),
      name: 'History',
      lastPropertyId: const IdUid(11, 7096016491200090264),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 530634320626949558),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2961344121111172571),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4006327556308545490),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8879935439257920742),
            name: 'date',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3075634229509525546),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7500993860638406761),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5202608559637055773),
            name: 'isIncome',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5963598722501439673),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2932975207736369366),
            name: 'dateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7096016491200090264),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 322351842174973315),
      name: 'CycleSavings',
      lastPropertyId: const IdUid(5, 720763880684892362),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2357957203855377126),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7982962980273279162),
            name: 'categoryName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2648301658816506991),
            name: 'cycleName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6864074120938655723),
            name: 'cycleAmount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 720763880684892362),
            name: 'savings',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 322351842174973315),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [1358053335749135773],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2752402896608338538,
        6072142397567212822,
        7685506308775661417,
        7430617893173994657,
        8772035493217625258,
        3433267797551436833,
        8378074971595057259,
        5580495707262040883
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Budget: EntityDefinition<Budget>(
        model: _entities[0],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {},
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          final repeatsOffset = fbb.writeString(object.repeats);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, repeatsOffset);
          fbb.addInt64(2, object.amount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final repeatsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object =
              Budget(id: idParam, repeats: repeatsParam, amount: amountParam);

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final iconOffset = fbb.writeString(object.icon);
          final transactionTypeOffset = fbb.writeString(object.transactionType);
          final cycleOffset = fbb.writeString(object.cycle);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, iconOffset);
          fbb.addOffset(4, transactionTypeOffset);
          fbb.addBool(5, object.isCap);
          fbb.addOffset(6, cycleOffset);
          fbb.addFloat64(7, object.cycleBudget);
          fbb.addBool(8, object.addToNextCycle);
          fbb.addFloat64(9, object.currentCycleAmountLeft);
          fbb.addFloat64(10, object.totalCycleAmount);
          fbb.addFloat64(11, object.totalAmountSpent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final transactionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isCapParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final cycleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final cycleBudgetParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final addToNextCycleParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final currentCycleAmountLeftParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final totalCycleAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final totalAmountSpentParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final object = Category(
              id: idParam,
              transactionType: transactionTypeParam,
              name: nameParam,
              icon: iconParam,
              isCap: isCapParam,
              cycle: cycleParam,
              cycleBudget: cycleBudgetParam,
              addToNextCycle: addToNextCycleParam,
              currentCycleAmountLeft: currentCycleAmountLeftParam,
              totalCycleAmount: totalCycleAmountParam,
              totalAmountSpent: totalAmountSpentParam);

          return object;
        }),
    LoanLend: EntityDefinition<LoanLend>(
        model: _entities[2],
        toOneRelations: (LoanLend object) => [],
        toManyRelations: (LoanLend object) => {},
        getId: (LoanLend object) => object.id,
        setId: (LoanLend object, int id) {
          object.id = id;
        },
        objectToFB: (LoanLend object, fb.Builder fbb) {
          final noteOffset = fbb.writeString(object.note);
          final phoneOffset = fbb.writeString(object.phone);
          final returnStatusOffset = fbb.writeString(object.returnStatus);
          final nameOffset = fbb.writeString(object.name);
          final genderEmojiOffset = fbb.writeString(object.genderEmoji);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isLoan);
          fbb.addInt64(2, object.dateTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfReturn.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.amount);
          fbb.addOffset(5, noteOffset);
          fbb.addOffset(6, phoneOffset);
          fbb.addOffset(7, returnStatusOffset);
          fbb.addOffset(8, nameOffset);
          fbb.addOffset(9, genderEmojiOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final isLoanParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final dateOfReturnParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final returnStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final genderEmojiParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = LoanLend(
              id: idParam,
              isLoan: isLoanParam,
              dateTime: dateTimeParam,
              dateOfReturn: dateOfReturnParam,
              amount: amountParam,
              name: nameParam,
              note: noteParam,
              phone: phoneParam,
              returnStatus: returnStatusParam,
              genderEmoji: genderEmojiParam);

          return object;
        }),
    Metadata: EntityDefinition<Metadata>(
        model: _entities[3],
        toOneRelations: (Metadata object) => [],
        toManyRelations: (Metadata object) => {},
        getId: (Metadata object) => object.id,
        setId: (Metadata object, int id) {
          object.id = id;
        },
        objectToFB: (Metadata object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final currencyOffset = fbb.writeString(object.currency);
          final countryOffset = fbb.writeString(object.country);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.currentBalance);
          fbb.addFloat64(2, object.yourWorth);
          fbb.addOffset(3, userNameOffset);
          fbb.addOffset(4, currencyOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addInt64(6, object.countryCode);
          fbb.addOffset(7, passwordOffset);
          fbb.addBool(8, object.hideOn);
          fbb.addBool(9, object.readMessage);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final currentBalanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final yourWorthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final countryCodeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final hideOnParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final readMessageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = Metadata(
              id: idParam,
              currentBalance: currentBalanceParam,
              yourWorth: yourWorthParam,
              userName: userNameParam,
              currency: currencyParam,
              country: countryParam,
              countryCode: countryCodeParam,
              password: passwordParam,
              hideOn: hideOnParam,
              readMessage: readMessageParam);

          return object;
        }),
    Savings: EntityDefinition<Savings>(
        model: _entities[4],
        toOneRelations: (Savings object) => [],
        toManyRelations: (Savings object) => {},
        getId: (Savings object) => object.id,
        setId: (Savings object, int id) {
          object.id = id;
        },
        objectToFB: (Savings object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final iconOffset = fbb.writeString(object.icon);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addFloat64(2, object.targetAmount);
          fbb.addFloat64(3, object.savedAmount);
          fbb.addOffset(4, iconOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final targetAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final savedAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final iconParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Savings(
              id: idParam,
              title: titleParam,
              targetAmount: targetAmountParam,
              savedAmount: savedAmountParam,
              icon: iconParam);

          return object;
        }),
    History: EntityDefinition<History>(
        model: _entities[5],
        toOneRelations: (History object) => [],
        toManyRelations: (History object) => {},
        getId: (History object) => object.id,
        setId: (History object, int id) {
          object.id = id;
        },
        objectToFB: (History object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.month);
          fbb.addInt64(3, object.date);
          fbb.addInt64(4, object.day);
          fbb.addFloat64(6, object.amount);
          fbb.addBool(7, object.isIncome);
          fbb.addOffset(8, categoryOffset);
          fbb.addInt64(9, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(10, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final yearParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final monthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dayParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final isIncomeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final object = History(
              id: idParam,
              year: yearParam,
              month: monthParam,
              date: dateParam,
              day: dayParam,
              dateTime: dateTimeParam,
              name: nameParam,
              amount: amountParam,
              isIncome: isIncomeParam,
              category: categoryParam);

          return object;
        }),
    CycleSavings: EntityDefinition<CycleSavings>(
        model: _entities[6],
        toOneRelations: (CycleSavings object) => [],
        toManyRelations: (CycleSavings object) => {},
        getId: (CycleSavings object) => object.id,
        setId: (CycleSavings object, int id) {
          object.id = id;
        },
        objectToFB: (CycleSavings object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          final cycleNameOffset = fbb.writeString(object.cycleName);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addOffset(2, cycleNameOffset);
          fbb.addFloat64(3, object.cycleAmount);
          fbb.addFloat64(4, object.savings);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final categoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final cycleNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cycleAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final savingsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = CycleSavings(
              id: idParam,
              categoryName: categoryNameParam,
              cycleName: cycleNameParam,
              cycleAmount: cycleAmountParam,
              savings: savingsParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// see [Budget.id]
  static final id = QueryIntegerProperty<Budget>(_entities[0].properties[0]);

  /// see [Budget.repeats]
  static final repeats =
      QueryStringProperty<Budget>(_entities[0].properties[1]);

  /// see [Budget.amount]
  static final amount =
      QueryIntegerProperty<Budget>(_entities[0].properties[2]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[1]);

  /// see [Category.icon]
  static final icon = QueryStringProperty<Category>(_entities[1].properties[2]);

  /// see [Category.transactionType]
  static final transactionType =
      QueryStringProperty<Category>(_entities[1].properties[3]);

  /// see [Category.isCap]
  static final isCap =
      QueryBooleanProperty<Category>(_entities[1].properties[4]);

  /// see [Category.cycle]
  static final cycle =
      QueryStringProperty<Category>(_entities[1].properties[5]);

  /// see [Category.cycleBudget]
  static final cycleBudget =
      QueryDoubleProperty<Category>(_entities[1].properties[6]);

  /// see [Category.addToNextCycle]
  static final addToNextCycle =
      QueryBooleanProperty<Category>(_entities[1].properties[7]);

  /// see [Category.currentCycleAmountLeft]
  static final currentCycleAmountLeft =
      QueryDoubleProperty<Category>(_entities[1].properties[8]);

  /// see [Category.totalCycleAmount]
  static final totalCycleAmount =
      QueryDoubleProperty<Category>(_entities[1].properties[9]);

  /// see [Category.totalAmountSpent]
  static final totalAmountSpent =
      QueryDoubleProperty<Category>(_entities[1].properties[10]);
}

/// [LoanLend] entity fields to define ObjectBox queries.
class LoanLend_ {
  /// see [LoanLend.id]
  static final id = QueryIntegerProperty<LoanLend>(_entities[2].properties[0]);

  /// see [LoanLend.isLoan]
  static final isLoan =
      QueryBooleanProperty<LoanLend>(_entities[2].properties[1]);

  /// see [LoanLend.dateTime]
  static final dateTime =
      QueryIntegerProperty<LoanLend>(_entities[2].properties[2]);

  /// see [LoanLend.dateOfReturn]
  static final dateOfReturn =
      QueryIntegerProperty<LoanLend>(_entities[2].properties[3]);

  /// see [LoanLend.amount]
  static final amount =
      QueryDoubleProperty<LoanLend>(_entities[2].properties[4]);

  /// see [LoanLend.note]
  static final note = QueryStringProperty<LoanLend>(_entities[2].properties[5]);

  /// see [LoanLend.phone]
  static final phone =
      QueryStringProperty<LoanLend>(_entities[2].properties[6]);

  /// see [LoanLend.returnStatus]
  static final returnStatus =
      QueryStringProperty<LoanLend>(_entities[2].properties[7]);

  /// see [LoanLend.name]
  static final name = QueryStringProperty<LoanLend>(_entities[2].properties[8]);

  /// see [LoanLend.genderEmoji]
  static final genderEmoji =
      QueryStringProperty<LoanLend>(_entities[2].properties[9]);
}

/// [Metadata] entity fields to define ObjectBox queries.
class Metadata_ {
  /// see [Metadata.id]
  static final id = QueryIntegerProperty<Metadata>(_entities[3].properties[0]);

  /// see [Metadata.currentBalance]
  static final currentBalance =
      QueryDoubleProperty<Metadata>(_entities[3].properties[1]);

  /// see [Metadata.yourWorth]
  static final yourWorth =
      QueryDoubleProperty<Metadata>(_entities[3].properties[2]);

  /// see [Metadata.userName]
  static final userName =
      QueryStringProperty<Metadata>(_entities[3].properties[3]);

  /// see [Metadata.currency]
  static final currency =
      QueryStringProperty<Metadata>(_entities[3].properties[4]);

  /// see [Metadata.country]
  static final country =
      QueryStringProperty<Metadata>(_entities[3].properties[5]);

  /// see [Metadata.countryCode]
  static final countryCode =
      QueryIntegerProperty<Metadata>(_entities[3].properties[6]);

  /// see [Metadata.password]
  static final password =
      QueryStringProperty<Metadata>(_entities[3].properties[7]);

  /// see [Metadata.hideOn]
  static final hideOn =
      QueryBooleanProperty<Metadata>(_entities[3].properties[8]);

  /// see [Metadata.readMessage]
  static final readMessage =
      QueryBooleanProperty<Metadata>(_entities[3].properties[9]);
}

/// [Savings] entity fields to define ObjectBox queries.
class Savings_ {
  /// see [Savings.id]
  static final id = QueryIntegerProperty<Savings>(_entities[4].properties[0]);

  /// see [Savings.title]
  static final title = QueryStringProperty<Savings>(_entities[4].properties[1]);

  /// see [Savings.targetAmount]
  static final targetAmount =
      QueryDoubleProperty<Savings>(_entities[4].properties[2]);

  /// see [Savings.savedAmount]
  static final savedAmount =
      QueryDoubleProperty<Savings>(_entities[4].properties[3]);

  /// see [Savings.icon]
  static final icon = QueryStringProperty<Savings>(_entities[4].properties[4]);
}

/// [History] entity fields to define ObjectBox queries.
class History_ {
  /// see [History.id]
  static final id = QueryIntegerProperty<History>(_entities[5].properties[0]);

  /// see [History.year]
  static final year = QueryIntegerProperty<History>(_entities[5].properties[1]);

  /// see [History.month]
  static final month =
      QueryIntegerProperty<History>(_entities[5].properties[2]);

  /// see [History.date]
  static final date = QueryIntegerProperty<History>(_entities[5].properties[3]);

  /// see [History.day]
  static final day = QueryIntegerProperty<History>(_entities[5].properties[4]);

  /// see [History.amount]
  static final amount =
      QueryDoubleProperty<History>(_entities[5].properties[5]);

  /// see [History.isIncome]
  static final isIncome =
      QueryBooleanProperty<History>(_entities[5].properties[6]);

  /// see [History.category]
  static final category =
      QueryStringProperty<History>(_entities[5].properties[7]);

  /// see [History.dateTime]
  static final dateTime =
      QueryIntegerProperty<History>(_entities[5].properties[8]);

  /// see [History.name]
  static final name = QueryStringProperty<History>(_entities[5].properties[9]);
}

/// [CycleSavings] entity fields to define ObjectBox queries.
class CycleSavings_ {
  /// see [CycleSavings.id]
  static final id =
      QueryIntegerProperty<CycleSavings>(_entities[6].properties[0]);

  /// see [CycleSavings.categoryName]
  static final categoryName =
      QueryStringProperty<CycleSavings>(_entities[6].properties[1]);

  /// see [CycleSavings.cycleName]
  static final cycleName =
      QueryStringProperty<CycleSavings>(_entities[6].properties[2]);

  /// see [CycleSavings.cycleAmount]
  static final cycleAmount =
      QueryDoubleProperty<CycleSavings>(_entities[6].properties[3]);

  /// see [CycleSavings.savings]
  static final savings =
      QueryDoubleProperty<CycleSavings>(_entities[6].properties[4]);
}
